C51 COMPILER V9.56.0.0   USBPD_PROTOCOL                                                    07/10/2023 15:49:38 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE USBPD_PROTOCOL
OBJECT MODULE PLACED IN .\objs\usbpd_protocol.obj
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE src\modules\usb_pd\usbpd\usbpd_protocol.c OPTIMIZE(8,SIZE) BROWSE INCDIR(./
                    -src/include;./src/drivers;./src/lib;./src/modules;./src/events;./src) DEBUG OBJECTEXTEND PRINT(.\objs\usbpd_protocol.lst
                    -) TABS(2) OBJECT(.\objs\usbpd_protocol.obj)

line level    source

   1          
   2          #include "usbpd_protocol.h"
   3          #include "usbpd_policy.h"
   4          #include "timer/timer.h"
   5          #include "sw_delay/sw_delay.h"
   6          #include "event.h"
   7          
   8          #if (FMOD_USB_PD_OPEN == YES)
   9          
  10          //pointers for mbcrx:
  11          #define  BMCRX_MSG_DATA_BASE     (USBPD_REG_BASE + 0x0101)  // PAGE-0C
  12          #define  PRX_MSGHEAD             ((volatile union  pd_msg_head  xdata *)(BMCRX_MSG_DATA_BASE+ 0))
  13          #define  PRX_MSG                 ((volatile struct pd_message   xdata *)(BMCRX_MSG_DATA_BASE+ 0))
  14          #define  PRX_VDMHEAD             ((volatile union  pd_vdm_head  xdata *)(BMCRX_MSG_DATA_BASE+ 2))
  15          //pointers for mbctx:
  16          #define  BMCTX_MSG_DATA_BASE     (USBPD_REG_BASE + 0x0301)  // PAGE-0E
  17          #define  PTX_MSGHEAD             ((volatile union  pd_msg_head  xdata *)(BMCTX_MSG_DATA_BASE+ 0))
  18          #define  PTX_MSG                 ((volatile struct pd_message   xdata *)(BMCTX_MSG_DATA_BASE+ 0))
  19          #define  PTX_VDMHEAD             ((volatile union  pd_vdm_head  xdata *)(BMCTX_MSG_DATA_BASE+ 2))
  20          
  21          // ronly one message buffer... it's easy to extended to message queue in fact...
  22          static volatile struct pd_message xdata pd_current_rxmsg; 
  23          struct pd_message xdata * pd_rxmsg_ptr; 
  24          
  25          // only one message buffer... it's easy to extended to message queue in fact...
  26          static volatile struct pd_message xdata pd_current_txmsg;
  27          struct pd_message xdata * pd_txmsg_ptr;
  28          
  29          // PD3.0 extend message buffer for receive: 
  30          static volatile struct pd_ext_message xdata pd_current_ext_rxmsg; 
  31          struct pd_ext_message xdata * pd_ext_rxmsg_ptr; 
  32          
  33          // PD3.0 extend message buffer for tranmit: 
  34          static volatile struct pd_ext_message xdata pd_current_ext_txmsg;
  35          struct pd_ext_message xdata * pd_ext_txmsg_ptr;
  36          
  37          // message id management:
  38          static uint8 xdata message_id_counter;
  39          // message id stored:
  40          static uint8 xdata message_id_stored;
  41          // messageID in received goodcrc:
  42          static uint8 xdata goodcrc_message_id; 
  43          
  44          // bmc rx interrupt signals:
  45          bit sig_goodcrc_received; 
  46                        
  47          // bmc tx interrupt signals:
  48          bit sig_send_message_done;   
  49          bit sig_send_goodcrc_done;
  50          bit sig_send_hardrst_done;
  51          bit sig_message_discarded;
  52          bit sig_goodcrc_discarded;
  53          
C51 COMPILER V9.56.0.0   USBPD_PROTOCOL                                                    07/10/2023 15:49:38 PAGE 2   

  54          // macro define:
  55          // trigger PHY to send message...
  56          #define TRIGGER_SEND_MESSAGE()    do{regmap0D(0x09) |= 0x01; regmap0D(0x09) &= 0xFE;}while(0) 
  57          // trigger PHY to send hardreset...
  58          #define TRIGGER_SEND_HARDRST()    do{regmap0D(0x08) |= 0x01; regmap0D(0x08) &= 0xFE;}while(0)
  59          // inform policy engine that hardreset received or has been sent...
  60          #define HARDRST_DONE_PE()   
  61          // check if bus idle...we have to check this before send out message...
  62          #define CCBUS_IS_IDLE()       (((regmap0B(0x27) & 0x05) == 0x05) ? 1 : 0)
  63          // set message type to default...
  64          #define RELEASE_MSG_TYPE()      do{usbpd_set_msg_type(MSG_TYPE_SOP);}while(0)
  65          
  66          // trace hardreset...
  67          static uint8 xdata hardreset_rcv_times      _at_  (GENMEM_REG_BASE + 0x0C);  
  68          static uint8 xdata hardreset_snd_times      _at_  (GENMEM_REG_BASE + 0x0D);
  69          
  70          // trace if message discarded... 
  71          static uint8 xdata trace_txretry_counter    _at_  (GENMEM_REG_BASE + 0x0E);
  72          static uint8 xdata trace_discard_counter    _at_  (GENMEM_REG_BASE + 0x0F); 
  73          
  74          /////////////////////////////////////// general external routine ////////////////////////////////////////
  75          
  76          //init routines:
  77          void usbpd_protocol_init(void)
  78          {
  79   1        // rx message init:
  80   1        memset((void*)&pd_current_rxmsg, 0, sizeof(struct pd_message)); 
  81   1        pd_rxmsg_ptr = &pd_current_rxmsg; 
  82   1                     
  83   1        // tx message init:
  84   1        memset((void*)&pd_current_txmsg, 0, sizeof(struct pd_message)); 
  85   1        pd_txmsg_ptr = &pd_current_txmsg; 
  86   1      
  87   1        // PD3.0 extern rx message init: 
  88   1        memset((void*)&pd_current_ext_rxmsg, 0, sizeof(struct pd_ext_message));
  89   1        pd_ext_rxmsg_ptr = &pd_current_ext_rxmsg; 
  90   1        
  91   1        // PD3.0 extern tx message init:
  92   1        memset((void*)&pd_current_ext_txmsg, 0, sizeof(struct pd_ext_message));
  93   1        pd_ext_txmsg_ptr = &pd_current_ext_txmsg; 
  94   1      
  95   1        // hw registers:
  96   1        regmap0D(0x09) &= 0xFE; // message trigger register init...
  97   1        regmap0D(0x08) &= 0xFE; // hard reset trigger register init...
  98   1        //regmap2D(0x3F) &= 0xFE; // hardreset done pe...
  99   1        usbpd_set_msg_type(MSG_TYPE_SOP); // set sop as default message type...
 100   1      
 101   1        // sw variables:
 102   1        message_id_counter = 0;
 103   1        message_id_stored = 0xFF;
 104   1        goodcrc_message_id = 0xFF; 
 105   1        // trace:
 106   1        trace_discard_counter = 0;
 107   1        trace_txretry_counter = 0; 
 108   1        hardreset_rcv_times = 0;
 109   1        hardreset_snd_times = 0;
 110   1      
 111   1        // bmc rx interrupt signals:
 112   1        sig_goodcrc_received = 0; 
 113   1                    
 114   1        // bmc tx interrupt signals:
 115   1        sig_send_message_done = 0;   
C51 COMPILER V9.56.0.0   USBPD_PROTOCOL                                                    07/10/2023 15:49:38 PAGE 3   

 116   1        sig_send_goodcrc_done = 0;
 117   1        sig_send_hardrst_done = 0;
 118   1        sig_message_discarded = 0;
 119   1        sig_goodcrc_discarded = 0;
 120   1      }
 121          
 122          void usbpd_protocol_reset(void)
 123          {
 124   1        // reset MessageIDCounter
 125   1        message_id_counter = 0; 
 126   1        // clear MessageID value:
 127   1        message_id_stored = 0xFF; 
 128   1      }
 129          
 130          
 131          //////////////////////////////// process received message ///////////////////////////////////
 132          
 133          bool usbpd_reply_goodcrc(void)
 134          {
 135   1        // 1. construct and send GoodCRC (PRL_Rx_Send_GoodCRC):
 136   1        PTX_MSGHEAD->bits._extended = 0; // don't forget this!!!
 137   1        PTX_MSGHEAD->bits._num_data_objects = 0;
 138   1        PTX_MSGHEAD->bits._message_id = PRX_MSGHEAD->bits._message_id; // same with recieved message... 
 139   1        PTX_MSGHEAD->bits._port_power_role = current_power_role; // defined in usbpd_policy.c...
 140   1        PTX_MSGHEAD->bits._spec_revision = SPEC_REV20; // we always set to 2.0 in goodcrc...
 141   1        PTX_MSGHEAD->bits._port_data_role = current_data_role;
 142   1        PTX_MSGHEAD->bits._message_type = CTRL_MSG_GOODCRC; 
 143   1      
 144   1        // 2. we should send goodcrc within 195us, or do nothing...
 145   1        /*
 146   1        {
 147   1        uint8 i;
 148   1        #define TIME_N    19  
 149   1        for(i=0; i<TIME_N; ++i)
 150   1        {
 151   1          // check if channel idle:
 152   1          if((regmap0B(0x27) & 0x05) == 0x05)
 153   1            break;
 154   1          // 19 * 10 = 190us...
 155   1          sw_delay_10us(); 
 156   1        } 
 157   1        if(i >= TIME_N) 
 158   1        {
 159   1          // time out! nothing happend...
 160   1          return;
 161   1        } 
 162   1        }
 163   1        */
 164   1        ///*
 165   1        // using hdmitx timer to calculate 195us...
 166   1        while(1)
 167   1        {
 168   2          // check if timeout:
 169   2          /*
 170   2          if(usbpd_us_timer_is_timeout(0))
 171   2          {
 172   2            //timeout! which mean channel not idle within 195us...  
 173   2            return false;
 174   2          } 
 175   2          */
 176   2      
 177   2          // check if channel idle:
C51 COMPILER V9.56.0.0   USBPD_PROTOCOL                                                    07/10/2023 15:49:38 PAGE 4   

 178   2          if(CCBUS_IS_IDLE())
 179   2          {
 180   3            // channel become idle...
 181   3            break;
 182   3          } 
 183   2        }
 184   1        //*/
 185   1        // trigger:
 186   1        TRIGGER_SEND_MESSAGE();
 187   1      
 188   1        return true; 
 189   1      }
 190          
 191          void usbpd_message_reception(void)
 192          {
 193   1        //uint8 data i; 
 194   1      
 195   1        // 1. check if it's soft reset message (PRL_RX_Layer_Reset_for_Receive):
 196   1        if(PRX_MSGHEAD->bits._num_data_objects == 0)
 197   1        {
 198   2          if(PRX_MSGHEAD->bits._message_type == CTRL_MSG_SOFT_RESET)
 199   2          {
 200   3            // reset messageID counter and stored messageID:
 201   3            usbpd_protocol_reset(); 
 202   3            // tell transmission to PRL_Tx_PHY_Layer_Reset state:
 203   3            // do nothing???    
 204   3          }
 205   2        }
 206   1      
 207   1        /*
 208   1        // 1.5 when BIST message arrived, we can not send GoodCRC:
 209   1        if(PRX_MSGHEAD->bits._num_data_objects && PRX_MSGHEAD->bits._message_type == DATA_MSG_BIST)
 210   1        {
 211   1          goto RX_SUCCESS;
 212   1        }
 213   1        */
 214   1      
 215   1        // 2. construct and send GoodCRC (PRL_Rx_Send_GoodCRC):
 216   1        //usbpd_reply_goodcrc(); 
 217   1        
 218   1        // 3. wait for goodcrc send complete:
 219   1        for(;;)
 220   1        {
 221   2          // if completed:
 222   2          if(sig_send_goodcrc_done)
 223   2          {
 224   3            // reset signal:
 225   3            sig_send_goodcrc_done = 0;
 226   3            break;
 227   3          }
 228   2          // if discarded:
 229   2          if(sig_goodcrc_discarded)
 230   2          {
 231   3            // trace if discarded...
 232   3            if((trace_discard_counter & 0x0F) == 0x0F)
 233   3              trace_discard_counter &= 0xF0;
 234   3            else
 235   3              trace_discard_counter += 0x01; 
 236   3            break;
 237   3          }
 238   2          // add some delay:
 239   2          sw_delay_10us();  
C51 COMPILER V9.56.0.0   USBPD_PROTOCOL                                                    07/10/2023 15:49:38 PAGE 5   

 240   2        }
 241   1        // if goodcrc discarded, nothing happened...
 242   1        if(sig_goodcrc_discarded)
 243   1        {
 244   2          // reset signal:
 245   2          sig_goodcrc_discarded = 0;
 246   2          return; 
 247   2        }
 248   1      
 249   1        // 4. check if messageID repeated:
 250   1        if(PRX_MSGHEAD->bits._message_id == message_id_stored)
 251   1        {
 252   2          // it's a repeat message, do nothing...
 253   2          return; 
 254   2        }
 255   1      
 256   1        // 5. it's a valid message:
 257   1        message_id_stored = PRX_MSGHEAD->bits._message_id;
 258   1        goto RX_SUCCESS; // disable warning...
 259   1      
 260   1      RX_SUCCESS:
 261   1      
 262   1        // 6. prepare message for policy engine...
 263   1        memcpy((void*)pd_rxmsg_ptr, (void*)PRX_MSG, sizeof(struct pd_message));
 264   1        // notify policy engine: 
 265   1        event_add_tail(0, EVT_USB_PD, PBIT_USBPD_PEMSG_PENDING); 
 266   1      }
 267          
 268          // check if receive goodcrc message:
 269          bool usbpd_check_goodcrc(void)
 270          {
 271   1        if((PRX_MSGHEAD->bits._num_data_objects == 0) && (PRX_MSGHEAD->bits._message_type == CTRL_MSG_GOODCRC))
 272   1        {
 273   2          // record message id:
 274   2          goodcrc_message_id = PRX_MSGHEAD->bits._message_id;
 275   2          // update signal:
 276   2          sig_goodcrc_received = 1;
 277   2          return true;
 278   2        }
 279   1        return false;
 280   1      }
 281          
 282          /////////////////////////////////////// process sending message //////////////////////////////////////////
             -/
 283          
 284          // protocol layer message transmission:
 285          bool usbpd_message_transmission(void)
 286          {
 287   1        uint8 retry_counter = 0;  // retry counter reset...
 288   1        uint8 retry_gate = (current_pd_version < SPEC_REV30) ? 4 : 3; 
 289   1      
 290   1        // 1. check if it's soft reset message (PRL_Tx_Layer_Reset_for_Transmit):
 291   1        if(pd_txmsg_ptr->_msg_head.bits._num_data_objects == 0)
 292   1        {
 293   2          if(pd_txmsg_ptr->_msg_head.bits._message_type == CTRL_MSG_SOFT_RESET)
 294   2          {
 295   3            // reset MessageIDCounter
 296   3            usbpd_protocol_reset();
 297   3            // tell reception to PRL_Rx_Wait_for_PHY_Message:
 298   3            // do nothing???    
 299   3          }
 300   2        }
C51 COMPILER V9.56.0.0   USBPD_PROTOCOL                                                    07/10/2023 15:49:38 PAGE 6   

 301   1      
 302   1        // 2. should not be GoodCRC Message, insert our MessageIDCounter (PRL_Tx_Construct_Message):
 303   1        pd_txmsg_ptr->_msg_head.bits._message_id = message_id_counter; 
 304   1        // copy to register map: 
 305   1        memcpy((void*)PTX_MSG, (void*)pd_txmsg_ptr, sizeof(struct pd_message)); 
 306   1      
 307   1      TX_RETRY:   
 308   1        // 3. check retry times whatever channel idle or not...
 309   1        retry_counter += 1;
 310   1        if(retry_counter <= retry_gate) // nRetryCounter = 3 (in PD3.0, it's 2) - so 4 times...
 311   1        {
 312   2          // trace retry:
 313   2          if(retry_counter > 1)
 314   2            trace_txretry_counter += 1; 
 315   2          // trigger PHY to send message:
 316   2          TRIGGER_SEND_MESSAGE(); 
 317   2        }
 318   1        else
 319   1        {
 320   2          // Failed! (PRL_Tx_Transmission_Error):
 321   2          message_id_counter += 1;
 322   2          message_id_counter &= 7;
 323   2          // recover message type:
 324   2          RELEASE_MSG_TYPE();      
 325   2          return false;  
 326   2        }
 327   1        
 328   1        // 4. wait for message send completed:
 329   1        for(;;)
 330   1        {
 331   2          // if message send over...
 332   2          if(sig_send_message_done)
 333   2          {
 334   3            sig_send_message_done = 0;
 335   3            break;
 336   3          }
 337   2          // if message discarded...
 338   2          if(sig_message_discarded)
 339   2          {
 340   3            // trace discarded...
 341   3            if((trace_discard_counter & 0xF0) == 0xF0)
 342   3              trace_discard_counter &= 0x0F; 
 343   3            else
 344   3              trace_discard_counter += 0x10; 
 345   3            // if message discarded, retry...
 346   3            break; 
 347   3          } 
 348   2        }
 349   1        // if discarded due to channel busy, try again...
 350   1        if(sig_message_discarded)
 351   1        {
 352   2          // reset flag:
 353   2          sig_message_discarded = 0;
 354   2          goto TX_RETRY; 
 355   2        }  
 356   1      
 357   1        // 5. wait for GoodCRC response: tReceive = 0.9~1.1ms
 358   1        ///*
 359   1        {
 360   2          uint8 data i;
 361   2          for(i=0; i<11; ++i)
 362   2          {
C51 COMPILER V9.56.0.0   USBPD_PROTOCOL                                                    07/10/2023 15:49:38 PAGE 7   

 363   3            // if goodcrc received:
 364   3            if(sig_goodcrc_received)
 365   3            {
 366   4              // reset signal:
 367   4              sig_goodcrc_received = 0;
 368   4              break;
 369   4            }
 370   3            // delay 100us:
 371   3            sw_delay_100us(); 
 372   3          }
 373   2          // timeout (PRL_Tx_Check_RetryCounter):
 374   2          if(i >= 11)
 375   2          {    
 376   3            goto TX_RETRY; 
 377   3          } 
 378   2        }
 379   1        //*/
 380   1        /*
 381   1        usbpd_us_timer_start(0, 1000); // tReceive = 0.9~1.1ms
 382   1        for(;;)
 383   1        {
 384   1          // if goodcrc received:
 385   1          if(sig_goodcrc_received)
 386   1          {
 387   1            // reset signal:
 388   1            sig_goodcrc_received = 0;
 389   1            break;
 390   1          }
 391   1          // if time out, try again:
 392   1          if(usbpd_us_timer_is_timeout(0))
 393   1          {
 394   1            goto TX_RETRY; 
 395   1          }
 396   1        }
 397   1          */
 398   1      
 399   1        // messageID mismatch:
 400   1        if(message_id_counter != goodcrc_message_id) 
 401   1        {
 402   2            goto TX_RETRY; 
 403   2        }
 404   1      
 405   1        // here, mean messageID match!
 406   1        message_id_counter += 1; 
 407   1        message_id_counter &= 7;  
 408   1        
 409   1        // not fix message type: 
 410   1        RELEASE_MSG_TYPE(); 
 411   1      
 412   1        return true; 
 413   1      }
 414          
 415          ///////////////////////////////////////// hard/cable reset process //////////////////////////////////////
 416          
 417          // send hard(cable) reset...
 418          void usbpd_send_hardreset(uint8 is_cable)
 419          {
 420   1        // disable warning:
 421   1        is_cable = is_cable; 
 422   1      
 423   1        // tracce:
 424   1        hardreset_snd_times += 1; 
C51 COMPILER V9.56.0.0   USBPD_PROTOCOL                                                    07/10/2023 15:49:38 PAGE 8   

 425   1                                
 426   1        // 1. PRL_HR_Reset_Layer:
 427   1        // reset MessageID Counter: 
 428   1        message_id_counter = 0; 
 429   1        // PRL_Tx_Wait_For_Message_Request & PRL_Rx_Wait_for_PHY_Message:
 430   1        // do nothing...
 431   1      
 432   1        // Request from policy layer...
 433   1        TRIGGER_SEND_HARDRST();
 434   1        // wait for complete: 4-5ms...
 435   1        {
 436   2          uint8 data i;
 437   2          for(i=0; i<5; ++i)
 438   2          {       
 439   3            if(sig_send_hardrst_done)
 440   3            {
 441   4              // reset flag:
 442   4              sig_send_hardrst_done = 0;
 443   4              break;    
 444   4            }
 445   3            // wait for 1ms...
 446   3            sw_delay_1ms(); 
 447   3          }
 448   2        }
 449   1          // whatever timeout or not, inform PE...
 450   1        HARDRST_DONE_PE();  
 451   1      }
 452          
 453          // hard(cable) reset received...will ba called from isr...
 454          void usbpd_hardreset_received(void)
 455          {
 456   1        // tracce:
 457   1        hardreset_rcv_times += 1; 
 458   1        // inform PE hardreset received...
 459   1        HARDRST_DONE_PE(); 
 460   1      }
 461          
 462          
 463          
 464          
 465          
 466          
 467          #endif
 468          
 469          
 470          
 471          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    714    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    123    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      8       5
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      6    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

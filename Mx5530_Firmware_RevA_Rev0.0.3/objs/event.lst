C51 COMPILER V9.56.0.0   EVENT                                                             07/10/2023 15:49:38 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE EVENT
OBJECT MODULE PLACED IN .\objs\event.obj
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE src\events\event.c OPTIMIZE(8,SIZE) BROWSE INCDIR(./src/include;./src/drive
                    -rs;./src/lib;./src/modules;./src/events;./src) DEBUG OBJECTEXTEND PRINT(.\objs\event.lst) TABS(2) OBJECT(.\objs\event.ob
                    -j)

line level    source

   1          
   2          #include "event.h"
   3          
   4          #if (IMOD_EVENT_OPEN == YES)
   5          
   6          
   7          #if (EVENT_LEVEL_SET == EVENT_FULL)
   8          
   9          // for check error:
  10          extern uint8 xdata g_evt_des_not_enough; // defined in sched.c
  11          
  12          /**
  13           * event linked
  14           */
  15          #define EVENT_DES_NUM     16      
  16          static struct event_des xdata event_des_pool[EVENT_DES_NUM];
  17          static struct event_des xdata event_head_t;
  18          static struct event_des xdata * event_head;
  19          static uint8 find_free_des(void);
  20          static void event_des_init(void);
  21          
  22          /**
  23           * interrupt mutex:
  24           */
  25          #define INT_ENABLE()    do{EA=1;}while(0)
  26          #define INT_DISABLE()   do{EA=0;}while(0)
  27          
  28          
  29          void event_initialize(void) 
  30          {
  31   1        g_evt_des_not_enough = 0;
  32   1      
  33   1        event_des_init();
  34   1      
  35   1        #if (CB_FUNC_ENABLE == YES)
                  cb_list_init();
                #endif
  38   1      }
  39          
  40          uint8 event_pending(struct event_des* p_des) 
  41          {
  42   1        struct event_des xdata * p;
  43   1      
  44   1        if(!event_head->next)
  45   1          return 0;
  46   1      
  47   1        //remove first node: thinking about priority???
  48   1        INT_DISABLE();
  49   1        p = event_head->next;
  50   1        event_head->next = p->next;
  51   1        INT_ENABLE();
  52   1        
  53   1        //fill data:
C51 COMPILER V9.56.0.0   EVENT                                                             07/10/2023 15:49:38 PAGE 2   

  54   1        p_des->type = p->type;
  55   1        p_des->param = p->param;
  56   1      
  57   1        //return des to pool:
  58   1        p->next = null;
  59   1        p->type = EVT_UN_DEF;
  60   1        p->param = 0;
  61   1      
  62   1        return 1;
  63   1      }
  64          
  65          /**
  66           * add event to evnet queue tail...
  67           */
  68          uint8 event_add_tail(uint8 bisr, uint8 type, uint8 param) 
  69          {
  70   1        uint8_t i;
  71   1        struct event_des xdata * p;
  72   1        struct event_des xdata * q;
  73   1      
  74   1        //prevent from interrupt by isr...
  75   1        if(!bisr) 
  76   1          INT_DISABLE();
  77   1      
  78   1        //check if there is same event already:
  79   1        p = event_head;
  80   1        while(p->next)
  81   1        {
  82   2          p = p->next;
  83   2      
  84   2          //check if same event pending already...
  85   2          if(p->type == type && p->param == param)
  86   2          {
  87   3            if(!bisr) 
  88   3              INT_ENABLE();
  89   3            return 0;
  90   3          }
  91   2        }
  92   1      
  93   1        //constuct des:
  94   1        i = find_free_des();
  95   1        if(i == EVT_UN_DEF)
  96   1        {
  97   2          //indicate the error...
  98   2          g_evt_des_not_enough++;
  99   2          if(!bisr)
 100   2            INT_ENABLE();
 101   2          return 0; // ignore event as no des space...
 102   2        }
 103   1        q = &event_des_pool[i];
 104   1        q->next = null;
 105   1        q->type = type;
 106   1        q->param = param;
 107   1      
 108   1        //add event to link:
 109   1        p->next = q;
 110   1        
 111   1        if(!bisr) 
 112   1          INT_ENABLE();
 113   1        return 1; 
 114   1      }
 115          
C51 COMPILER V9.56.0.0   EVENT                                                             07/10/2023 15:49:38 PAGE 3   

 116          
 117          /**
 118           * add event to event queue head:
 119           */
 120          uint8 event_add_head(uint8 bisr, uint8 type, uint8 param) 
 121          {
 122   1        uint8 i;
 123   1        struct event_des xdata * p;
 124   1        struct event_des xdata * q;
 125   1      
 126   1        //prevent from interrupt by isr...
 127   1        if(!bisr)
 128   1          INT_DISABLE();
 129   1      
 130   1        //check if there is same event already:
 131   1        p = event_head;
 132   1        while(p->next)
 133   1        {
 134   2          p = p->next;
 135   2      
 136   2          //check if same event pending already...
 137   2          if(p->type == type && p->param == param)
 138   2          {
 139   3            if(!bisr)
 140   3              INT_ENABLE();
 141   3            return 0;
 142   3          }
 143   2        }
 144   1      
 145   1        //constuct des:
 146   1        i = find_free_des();
 147   1        if(i == EVT_UN_DEF)
 148   1        {
 149   2          g_evt_des_not_enough++;
 150   2          if(!bisr)
 151   2            INT_ENABLE();
 152   2          return 0; // ignore event as no des space...
 153   2        }
 154   1        q = &event_des_pool[i];
 155   1        q->next = null;
 156   1        q->type = type;
 157   1        q->param = param;
 158   1      
 159   1        //add event to link:
 160   1        p = event_head->next;
 161   1        event_head->next = q;
 162   1        q->next = p;
 163   1        
 164   1        if(!bisr)
 165   1          INT_ENABLE();
 166   1        return 1; 
 167   1      }
 168          
 169          
 170          /***************************** static functions ****************************/
 171          
 172          uint8 find_free_des(void)
 173          {
 174   1        uint8 i;
 175   1        for(i=0; i<EVENT_DES_NUM; ++i)
 176   1        {               
 177   2          if(event_des_pool[i].type == EVT_UN_DEF)
C51 COMPILER V9.56.0.0   EVENT                                                             07/10/2023 15:49:38 PAGE 4   

 178   2          {
 179   3            event_des_pool[i].type = EVT_UN_DEF - 1; // indicate that this is unuseful...
 180   3            return i;
 181   3          }
 182   2        }
 183   1        return EVT_UN_DEF;
 184   1      }
 185          
 186          void event_des_init(void)
 187          {
 188   1        uint8_t i;
 189   1      
 190   1        //des pool init:
 191   1        for(i=0; i<EVENT_DES_NUM; ++i)
 192   1        {
 193   2          event_des_pool[i].next = null;
 194   2          event_des_pool[i].type = EVT_UN_DEF;
 195   2          event_des_pool[i].param = 0;
 196   2        }
 197   1      
 198   1        //header init:
 199   1        event_head_t.next = null;
 200   1        event_head_t.type = EVT_UN_DEF;
 201   1        event_head_t.param = 0;
 202   1        event_head = &event_head_t; // for easy use...
 203   1      }
 204          
 205          
 206          #endif
 207          
 208          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    675    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     85    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2      13
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
